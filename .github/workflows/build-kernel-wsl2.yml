name: Build flashable kernel (MIUI/HyperOS renoir)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Kernel Source Code
      uses: actions/checkout@v3
      with:
        github-server-url: 'https://github.com'
        repository: aj4664/kernel_xiaomi_sm8250  # 修改为新的仓库
        ref: backport-5.10-bpf                   # 使用指定的分支
        path: kernel-srcroot
    
    - name: Setup Build Environment
      run: |
        sudo apt-get update
        sudo apt install -y libelf-dev lld llvm gcc binutils-arm-linux-gnueabi binutils-aarch64-linux-gnu curl wget vim git ccache automake flex lzop bison gperf build-essential zip zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 x11proto-core-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler kmod python3 python3-pip

    - name: Setup Nathan Slim Clang
      run: |
        mkdir ./toolchain
        cd ./toolchain
        curl -o llvm-18.tar.gz https://mirrors.edge.kernel.org/pub/tools/llvm/files/llvm-18.1.8-x86_64.tar.gz
        tar -xvf llvm-18.tar.gz
        TARGET_CLANG_PATH="$(pwd)/$(find ./ -name "bin")"
        echo "TARGET_CLANG_PATH=${TARGET_CLANG_PATH}" >> $GITHUB_ENV

    - name: Setup Kernel SU (if exists)
      run: |
        cd kernel-srcroot
        # 检查是否存在子模块，如果存在则初始化
        if [ -f .gitmodules ]; then
          git submodule init
          git submodule update --checkout
        fi

    - name: Build Kernel for renoir
      run: |
        cd kernel-srcroot
        PATH=${{ env.TARGET_CLANG_PATH }}/:$PATH
        clang --version

        # 执行构建脚本
        chmod +x buildall.sh
        ./buildall.sh
        
        # 查找生成的内核文件（根据实际情况调整路径和文件名模式）
        KERNEL_FILE=$(find . -name "*.img" -o -name "*.zip" | head -n 1)
        if [ -n "$KERNEL_FILE" ]; then
          echo "TARGET_KERNEL_FLASHABLE_NAME=$(basename $KERNEL_FILE)" >> $GITHUB_ENV
          echo "TARGET_KERNEL_FLASHABLE_PATH=$(dirname $KERNEL_FILE)" >> $GITHUB_ENV
        else
          echo "未找到内核文件，检查构建输出"
          ls -la
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: kernel-build-${{ github.run_id }}
        path: kernel-srcroot/${{ env.TARGET_KERNEL_FLASHABLE_PATH }}/${{ env.TARGET_KERNEL_FLASHABLE_NAME }}
