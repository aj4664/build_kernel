name: B111111uild flashable kernel (MIUI/HyperOS renoir)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Kernel Source Code
      uses: actions/checkout@v3
      with:
        github-server-url: 'https://github.com'
        repository: aj4664/kernel_xiaomi_sm8250
        ref: backport-5.10-bpf
        path: kernel-srcroot
    
    - name: Setup Build Environment
      run: |
        sudo apt-get update
        sudo apt install -y libelf-dev lld llvm gcc binutils-arm-linux-gnueabi binutils-aarch64-linux-gnu curl wget vim git ccache automake flex lzop bison gperf build-essential zip zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 x11proto-core-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler kmod python3 python3-pip

    - name: Setup Nathan Slim Clang
      run: |
        mkdir ./toolchain
        cd ./toolchain
        curl -o llvm-18.tar.gz https://mirrors.edge.kernel.org/pub/tools/llvm/files/llvm-18.1.8-x86_64.tar.gz
        tar -xvf llvm-18.tar.gz
        TARGET_CLANG_PATH="$(pwd)/$(find ./ -name "bin" -type d)"
        echo "TARGET_CLANG_PATH=${TARGET_CLANG_PATH}" >> $GITHUB_ENV

    - name: Build Kernel for renoir
      run: |
        cd kernel-srcroot
        PATH=${{ env.TARGET_CLANG_PATH }}/:$PATH
        clang --version

        # 执行构建脚本
        chmod +x buildall.sh
        ./buildall.sh
        
        # 查找生成的内核文件并清理路径
        KERNEL_FILE=$(find . -name "*.img" -o -name "*.zip" | head -n 1)
        if [ -n "$KERNEL_FILE" ]; then
          # 移除可能的 ./ 前缀和相对路径
          CLEAN_PATH=$(dirname "$KERNEL_FILE" | sed 's|^\./||' | sed 's|^\.\./||')
          CLEAN_NAME=$(basename "$KERNEL_FILE")
          echo "TARGET_KERNEL_FLASHABLE_NAME=$CLEAN_NAME" >> $GITHUB_ENV
          echo "TARGET_KERNEL_FLASHABLE_PATH=$CLEAN_PATH" >> $GITHUB_ENV
        else
          echo "未找到内核文件，检查构建输出"
          ls -la
          exit 1
        fi

    - name: Prepare build artifacts
      run: |
        cd kernel-srcroot
        
        # 清理路径中的相对符号
        CLEAN_BOOT_PATH=$(echo "out/arch/arm64/boot" | sed 's|^\./||' | sed 's|^\.\./||')
        CLEAN_CONFIG_PATH=$(echo "out/.config" | sed 's|^\./||' | sed 's|^\.\./||')
        
        # 压缩 out/arch/arm64/boot 文件夹
        if [ -d "$CLEAN_BOOT_PATH" ]; then
          tar -czf arm64-boot-files.tar.gz -C "$CLEAN_BOOT_PATH" .
          echo "ARM64_BOOT_TAR=arm64-boot-files.tar.gz" >> $GITHUB_ENV
        else
          echo "$CLEAN_BOOT_PATH 目录不存在"
          ls -la out/ || echo "out目录不存在"
          ls -la out/arch/ || echo "out/arch目录不存在"
        fi
        
        # 复制 .config 文件
        if [ -f "$CLEAN_CONFIG_PATH" ]; then
          cp "$CLEAN_CONFIG_PATH" kernel.config
          echo "KERNEL_CONFIG=kernel.config" >> $GITHUB_ENV
        else
          echo "$CLEAN_CONFIG_PATH 文件不存在"
          ls -la out/ || echo "out目录不存在"
        fi

    - name: Upload kernel artifact
      uses: actions/upload-artifact@v4
      with:
        name: kernel-flashable-${{ github.run_id }}
        path: kernel-srcroot/${{ env.TARGET_KERNEL_FLASHABLE_PATH }}/${{ env.TARGET_KERNEL_FLASHABLE_NAME }}
        if-no-files-found: error

    - name: Upload config file
      uses: actions/upload-artifact@v4
      with:
        name: kernel-config-${{ github.run_id }}
        path: kernel-srcroot/${{ env.KERNEL_CONFIG }}
        if-no-files-found: warn

    - name: Upload arm64 boot files
      uses: actions/upload-artifact@v4
      with:
        name: arm64-boot-files-${{ github.run_id }}
        path: kernel-srcroot/${{ env.ARM64_BOOT_TAR }}
        if-no-files-found: warn
